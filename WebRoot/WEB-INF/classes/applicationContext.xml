<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"
		default-lazy-init="false">
	
	<!-- Spring定时器配置  -->
	<context:annotation-config />    
	<!-- 开启这个配置,spring才能识别@Scheduled注解 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <!-- 配置定时器的线程池 -->
    <task:scheduler id="qbScheduler" pool-size="10"/>  
	
	<!-- 加载数据库配置文件 -->
	<util:properties id="jdbc" location="classpath:jdbc.properties"/>
	
	<!-- 定义数据源 -->
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="url" value="#{jdbc.url}"/>
		<property name="driverClassName" value="#{jdbc.driver}"/>
		<property name="username" value="#{jdbc.user}"/>
		<property name="password" value="#{jdbc.password}"/>
	</bean>
	
	<!-- 热部署mapper前配置 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="ds" />
	    <property name="mapperLocations" value="classpath:org/zhao/sql/*.xml"/>
	</bean> 
	-->
	
	<!-- 配置Session工厂:指定dataSource;dao接口映射文件mapperLocations;加载mybatis主配置文件 configLocation-->
	<!-- 热部署mapper后配置 -->
	<bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
	 	<property name="dataSource" ref="ds" />
	    <!-- 加载mybatis主配置文件 -->
	    <!-- <property name="configLocation" value="classpath:conf/mybatis-config.xml"></property> -->
	    <!-- 自动扫描dao接口的映射(mapper)文件 -->
	 	<property name="mapperLocations" value="classpath:org/zhao/sql/*.xml"/>
	</bean>
	<bean class="com.baomidou.mybatisplus.spring.MybatisMapperRefresh">
	    <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	    <constructor-arg name="mapperLocations" value="classpath:org/zhao/sql/*.xml"/>
	    <constructor-arg name="delaySeconds" value="5"/>
	    <constructor-arg name="sleepSeconds" value="10"/>
	    <constructor-arg name="enabled" value="true"/>
	</bean>
    
    <!--批量扫描映射文件接口(dao)并生成实例-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<!-- basePackage用于指定Mapper接口所在的包,多个包用逗号隔开 -->
        <property name="basePackage" value="org.zhao.dao" />
	</bean>
	
	<!-- 开启组件扫描 -->
	<context:component-scan base-package="org.zhao" />
	
	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!--启用注解驱动,支持MVC注解,如:用于支持＠RequestMapping -->
	<mvc:annotation-driven />
	
	<!-- 注册拦截器 -->
	<mvc:interceptors>
		<!-- 登录检查拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/login/*"/>
			<bean class="org.zhao.interceptor.LoginInterceptor"/>
		</mvc:interceptor>
		<!-- 单点登录检查拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/login/*"/>
			<bean class="org.zhao.interceptor.SingleSignOnInterceptor"/>
		</mvc:interceptor>
		<!-- 判断当前模块拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="org.zhao.interceptor.CurrentModuleInterceptor"/>
		</mvc:interceptor>
		<!-- 权限检查拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/login/*"/>
			<mvc:exclude-mapping path="/user/*"/>
			<bean class="org.zhao.interceptor.CheckModuleInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 简单配置异常处理：出现异常将转到指定页面,控制台不显示异常信息,适合全局处理简单异常 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
	        <props>
				<!--  <prop key="异常类型">视图页面</prop> -->
	            <prop key="java.lang.Exception">main/error</prop>
	        </props>
	    </property>
	</bean>
	
	<!-- 开启aop注解:强制使用CGLIB代理实现AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>
	
	<!-- 方式1：通过配置的方式来进行事务处理(声明式事务) -->
	<!-- 配置通知advice -->  
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 事务属性配置 -->
		<tx:attributes>
			<!-- 方法对应的传播属性 -->  
			<tx:method name="find*" read-only="true" />
			<tx:method name="to*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="calculate*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- 事务控制位置，一般在业务层service -->  
	<aop:config proxy-target-class="true">
		<!-- 配置切面advisor,切入点pointcut -->  
		<!-- <aop:advisor advice-ref="txAdvice" pointcut="within(org.zhao.service..*)" /> -->
		<aop:pointcut expression="execution(* org.zhao.service..*.*(..))" id="pt"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt" />
	</aop:config>
	
	<!-- 方式2:通过注解的方式进行事务处理 -->
	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性
	<tx:annotation-driven transaction-manager="txManager"/>
	-->

</beans>